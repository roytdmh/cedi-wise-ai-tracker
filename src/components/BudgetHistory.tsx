import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { History, Calendar, TrendingUp, TrendingDown, Trash2, Edit, Download } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface SavedBudget {
  id: string;
  name: string;
  income_amount: number;
  income_frequency: string;
  income_currency: string;
  expenses: any[];
  created_at: string;
}

interface BudgetHistoryProps {
  onRestoreBudget: (budget: SavedBudget) => void;
}

const BudgetHistory = ({ onRestoreBudget }: BudgetHistoryProps) => {
  const [savedBudgets, setSavedBudgets] = useState<SavedBudget[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  const currencies = [
    { code: 'USD', symbol: '$' },
    { code: 'GHS', symbol: '₵' },
    { code: 'EUR', symbol: '€' },
    { code: 'GBP', symbol: '£' },
    { code: 'NGN', symbol: '₦' },
  ];

  const getCurrencySymbol = (currencyCode: string) => {
    return currencies.find(c => c.code === currencyCode)?.symbol || '$';
  };

  const getMonthlyAmount = (amount: number, frequency: string) => {
    const multipliers = { daily: 30, weekly: 4.33, 'bi-weekly': 2.17, monthly: 1 };
    return amount * (multipliers[frequency as keyof typeof multipliers] || 1);
  };

  const calculateBudgetSummary = (budget: SavedBudget) => {
    const monthlyIncome = getMonthlyAmount(budget.income_amount, budget.income_frequency);
    const totalExpenses = budget.expenses.reduce((sum, expense) => 
      sum + getMonthlyAmount(expense.amount, expense.frequency), 0
    );
    const surplus = monthlyIncome - totalExpenses;
    const savingsRate = monthlyIncome > 0 ? (surplus / monthlyIncome) * 100 : 0;
    
    let healthStatus = 'Poor';
    if (savingsRate >= 20) healthStatus = 'Excellent';
    else if (savingsRate >= 10) healthStatus = 'Good';
    else if (savingsRate >= 0) healthStatus = 'Fair';

    return { monthlyIncome, totalExpenses, surplus, savingsRate, healthStatus };
  };

  const fetchBudgets = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        console.log('No user found');
        setLoading(false);
        return;
      }

      const { data, error } = await supabase
        .from('budgets')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      
      // Transform the data to match our interface and handle Json type properly
      const transformedData: SavedBudget[] = (data || []).map(budget => ({
        id: budget.id,
        name: budget.name,
        income_amount: budget.income_amount,
        income_frequency: budget.income_frequency,
        income_currency: budget.income_currency,
        expenses: Array.isArray(budget.expenses) ? budget.expenses : [],
        created_at: budget.created_at
      }));
      
      setSavedBudgets(transformedData);
    } catch (error) {
      console.error('Error fetching budgets:', error);
      toast({
        title: "Error",
        description: "Failed to load budget history",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const deleteBudget = async (budgetId: string) => {
    try {
      const { error } = await supabase
        .from('budgets')
        .delete()
        .eq('id', budgetId);

      if (error) throw error;

      setSavedBudgets(prev => prev.filter(b => b.id !== budgetId));
      toast({
        title: "Budget Deleted",
        description: "Budget has been removed from your history"
      });
    } catch (error) {
      console.error('Error deleting budget:', error);
      toast({
        title: "Error",
        description: "Failed to delete budget",
        variant: "destructive"
      });
    }
  };

  const downloadBudgetAsPDF = (budget: SavedBudget) => {
    const summary = calculateBudgetSummary(budget);
    const symbol = getCurrencySymbol(budget.income_currency);
    
    // Create PDF content as text (simplified version)
    const pdfContent = `
CEDIWISE BUDGET REPORT
======================

Budget Name: ${budget.name}
Created: ${new Date(budget.created_at).toLocaleDateString()}

INCOME
------
Amount: ${symbol}${budget.income_amount.toFixed(2)}
Frequency: ${budget.income_frequency}
Monthly Equivalent: ${symbol}${summary.monthlyIncome.toFixed(2)}

EXPENSES
--------
${budget.expenses.map(expense => 
  `${expense.category}: ${symbol}${expense.amount.toFixed(2)} (${expense.frequency})`
).join('\n')}

SUMMARY
-------
Total Monthly Expenses: ${symbol}${summary.totalExpenses.toFixed(2)}
Monthly Surplus/Deficit: ${symbol}${summary.surplus.toFixed(2)}
Savings Rate: ${summary.savingsRate.toFixed(1)}%
Financial Health: ${summary.healthStatus}

Generated by CediWise Budget Tracker
    `.trim();

    // Create and download the file
    const blob = new Blob([pdfContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${budget.name.replace(/[^a-zA-Z0-9]/g, '_')}_budget.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    toast({
      title: "Download Started",
      description: "Budget report has been downloaded as a text file"
    });
  };

  useEffect(() => {
    fetchBudgets();
  }, []);

  if (loading) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="text-center">Loading budget history...</div>
        </CardContent>
      </Card>
    );
  }

  if (savedBudgets.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <History className="h-5 w-5" />
            Budget History
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center text-gray-500 py-8">
            <History className="h-12 w-12 mx-auto mb-4 text-gray-300" />
            <p>No saved budgets yet. Save your first budget to see it here!</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <History className="h-5 w-5" />
          Budget History ({savedBudgets.length})
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {savedBudgets.map((budget) => {
            const summary = calculateBudgetSummary(budget);
            const symbol = getCurrencySymbol(budget.income_currency);
            
            return (
              <div key={budget.id} className="border rounded-lg p-4 bg-gray-50">
                <div className="flex items-start justify-between mb-3">
                  <div>
                    <h3 className="font-semibold text-lg">{budget.name}</h3>
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <Calendar className="h-4 w-4" />
                      {new Date(budget.created_at).toLocaleDateString()}
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => onRestoreBudget(budget)}
                      className="flex items-center gap-1"
                    >
                      <Edit className="h-4 w-4" />
                      Edit
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => downloadBudgetAsPDF(budget)}
                      className="flex items-center gap-1"
                    >
                      <Download className="h-4 w-4" />
                      Download
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => deleteBudget(budget.id)}
                      className="text-red-600 hover:text-red-700 hover:bg-red-50"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-3">
                  <div className="text-center">
                    <div className="text-sm text-gray-600">Monthly Income</div>
                    <div className="font-semibold text-emerald-600">
                      {symbol}{summary.monthlyIncome.toFixed(2)}
                    </div>
                  </div>
                  <div className="text-center">
                    <div className="text-sm text-gray-600">Total Expenses</div>
                    <div className="font-semibold text-red-600">
                      {symbol}{summary.totalExpenses.toFixed(2)}
                    </div>
                  </div>
                  <div className="text-center">
                    <div className="text-sm text-gray-600">Surplus/Deficit</div>
                    <div className={`font-semibold ${summary.surplus >= 0 ? 'text-blue-600' : 'text-red-600'}`}>
                      {summary.surplus >= 0 ? <TrendingUp className="h-4 w-4 inline mr-1" /> : <TrendingDown className="h-4 w-4 inline mr-1" />}
                      {symbol}{summary.surplus.toFixed(2)}
                    </div>
                  </div>
                  <div className="text-center">
                    <div className="text-sm text-gray-600">Financial Health</div>
                    <Badge 
                      className={`
                        ${summary.healthStatus === 'Excellent' ? 'bg-emerald-500' : ''}
                        ${summary.healthStatus === 'Good' ? 'bg-blue-500' : ''}
                        ${summary.healthStatus === 'Fair' ? 'bg-yellow-500' : ''}
                        ${summary.healthStatus === 'Poor' ? 'bg-red-500' : ''}
                        text-white
                      `}
                    >
                      {summary.healthStatus}
                    </Badge>
                  </div>
                </div>

                <div className="text-sm text-gray-600">
                  <span className="font-medium">{budget.expenses.length}</span> expense categories •{' '}
                  <span className="font-medium">{summary.savingsRate.toFixed(1)}%</span> savings rate
                </div>
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
};

export default BudgetHistory;
